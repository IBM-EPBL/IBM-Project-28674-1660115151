# -*- coding: utf-8 -*-
"""Resale value prediction final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1EI-iEToam7Nr-oKnziYCGbtmzr27AEV3

## **Import Required Libraries**
"""

import pandas as pd
import numpy as np
import matplotlib as plt
from sklearn.preprocessing import LabelEncoder
import pickle

"""# **Read The Datasets**"""

df = pd.read_csv("/content/autos.csv",header=0,sep=',', encoding='Latin1',)

"""# **Cleaning The Dataset**"""

print(df.seller.value_counts())
df[df.seller != 'gewerblich']
df=df.drop('seller',1)
print(df.offerType.value_counts())
df[df.offerType != 'Gesuch']
df=df.drop('offerType',1)

print(df.shape)
df=df[(df.powerPS > 50) & (df.powerPS < 900)]
print(df.shape)

df = df[(df.yearOfRegistration >= 1950) & (df.yearOfRegistration < 2017)]
print(df.shape)

df.drop(['name','abtest','dateCrawled','nrOfPictures','lastSeen','postalCode','dateCreated'], axis='columns', inplace=True)

new_df = df.copy()
new_df = new_df.drop_duplicates(['price','vehicleType','yearOfRegistration','gearbox','powerPS','model','kilometer','monthOfRegistration','fuelType','notRepairedDamage'])

new_df.gearbox.replace(('manuell','automatik'),('manual','automatic'), inplace=True)
new_df.fuelType.replace(('benzin','andere','elektro'),('petrol','others','electric'), inplace=True)
new_df.vehicleType.replace(('kleinwagen','cabrio','kombi','andere'),('small car','convertible','combination','others'),inplace=True)
new_df.notRepairedDamage.replace(('ja','nein'),('Yes','No'),inplace=True)

new_df = new_df[(new_df.price >= 100) & (new_df.price <=150000)]

new_df['notRepairedDamage'].fillna(value='not-declared', inplace=True)
new_df['fuelType'].fillna(value='not-declared', inplace=True)
new_df['gearbox'].fillna(value='not-declared', inplace=True)
new_df['vehicleType'].fillna(value='not-declared', inplace=True)
new_df['model'].fillna(value='not-declared',inplace=True)

new_df.to_csv("autos_preprocessed.csv")

labels = ['gearbox','notRepairedDamage','model','brand','fuelType','vehicleType']
mapper={}
for i in labels:
  mapper[i] = LabelEncoder()
  mapper[i].fit(new_df[i])
  tr = mapper[i].transform(new_df[i])
  np.save(str('classes'+i+'.npy'),mapper[i].classes_)
  print(i,":",mapper[i])
  new_df.loc[:, i+ '_Labels'] = pd.Series(tr, index=new_df.index)

labeled = new_df[ ['price'
                          ,'yearOfRegistration'
                          ,'powerPS'
                          ,'kilometer'
                          ,'monthOfRegistration'
                          ]
                  +[x+"_Labels" for x in labels]]
print(labeled.columns)

"""# **Splitting Data Into Independent And Dependent Variables**"""

Y = labeled.iloc[:,0].values
X = labeled.iloc[:,1:].values
Y = Y.reshape(-1,1)

from sklearn.model_selection import cross_val_score, train_test_split
X_train,X_test,Y_train,Y_test =train_test_split(X,Y,test_size=0.3,random_state =3)

X_train

X_train.shape

X_test

X_test.shape

Y_train

Y_train.shape

Y_test

Y_test.shape

"""# **Choose The Appropriate Model**"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import r2_score
regressor = RandomForestRegressor(n_estimators=1000,max_depth=10,random_state=34)
regressor.fit(X_train,np.ravel(Y_train,order='C'))

"""# **Check The Metrics Of The Model**"""

y_pred = regressor.predict(X_test)
print(r2_score(Y_test,y_pred))

"""# **Save The Model**"""

filename = 'resale_model.sav'
pickle.dump(regressor,open(filename, 'wb'))